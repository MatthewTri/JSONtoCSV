# -*- coding: utf-8 -*-
"""CSV_GITHUB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QKGuOonz1QrVdDcNh-Mk3s0fkp35V89e
"""

import json
import csv
from google.colab import files
from io import StringIO

# Upload Swagger JSON file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

with open(filename, "r", encoding="utf-8") as f:
    swagger = json.load(f)

schemas = swagger.get("components", {}).get("schemas", {})
paths = swagger.get("paths", {})

def resolve_schema(schema):
    if "$ref" in schema:
        ref_name = schema["$ref"].split("/")[-1]
        return schemas.get(ref_name, {})
    return schema

def schema_to_string(schema):
    schema = resolve_schema(schema)
    if "properties" in schema:
        return ", ".join([
            f"{name}: {resolve_schema(info).get('type', 'object')}"
            for name, info in schema["properties"].items()
        ])
    elif "type" in schema and schema["type"] == "array":
        item_schema = resolve_schema(schema.get("items", {}))
        if "properties" in item_schema:
            return "[ " + ", ".join([
                f"{name}: {resolve_schema(info).get('type', 'object')}"
                for name, info in item_schema["properties"].items()
            ]) + " ]"
        else:
            return "array of " + item_schema.get("type", "object")
    elif "type" in schema:
        return schema.get("type")
    return ""

data_rows = []

for path, methods in paths.items():
    for method, details in methods.items():
        method = method.upper()

        # Use `operationId` instead of summary
        operation_id = details.get("operationId", "")

        # === PAYLOAD ===
        payload = ""
        if "requestBody" in details:
            content = details["requestBody"].get("content", {})
            for ct in ["application/json", "text/json", "application/*+json"]:
                if ct in content:
                    payload = schema_to_string(content[ct].get("schema", {}))
                    break

        # === RESPONSE ===
        response = ""
        res_200 = details.get("responses", {}).get("200", {})
        res_content = res_200.get("content", {})
        for ct in ["application/json", "text/json", "text/plain"]:
            if ct in res_content:
                response = schema_to_string(res_content[ct].get("schema", {}))
                break

        data_rows.append({
            "Method": method,
            "URL": path,
            "Name": operation_id,
            "Payload": payload,
            "Response": response
        })

# Save to CSV
csv_file = "swagger_output_with_name.csv"
with open(csv_file, "w", newline='', encoding="utf-8") as f:
    writer = csv.DictWriter(f, fieldnames=["Method", "URL", "Name", "Payload", "Response"])
    writer.writeheader()
    writer.writerows(data_rows)

files.download(csv_file)